// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kripsy/gophermart/internal/auth/internal/usecase (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetNextUserID mocks base method.
func (m *MockRepository) GetNextUserID(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextUserID", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextUserID indicates an expected call of GetNextUserID.
func (mr *MockRepositoryMockRecorder) GetNextUserID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextUserID", reflect.TypeOf((*MockRepository)(nil).GetNextUserID), arg0)
}

// GetUserHashPassword mocks base method.
func (m *MockRepository) GetUserHashPassword(arg0 context.Context, arg1 string) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHashPassword", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserHashPassword indicates an expected call of GetUserHashPassword.
func (mr *MockRepositoryMockRecorder) GetUserHashPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHashPassword", reflect.TypeOf((*MockRepository)(nil).GetUserHashPassword), arg0, arg1)
}

// IsUserExists mocks base method.
func (m *MockRepository) IsUserExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExists indicates an expected call of IsUserExists.
func (mr *MockRepositoryMockRecorder) IsUserExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExists", reflect.TypeOf((*MockRepository)(nil).IsUserExists), arg0, arg1)
}

// RegisterUser mocks base method.
func (m *MockRepository) RegisterUser(arg0 context.Context, arg1, arg2 string, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockRepositoryMockRecorder) RegisterUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockRepository)(nil).RegisterUser), arg0, arg1, arg2, arg3)
}
